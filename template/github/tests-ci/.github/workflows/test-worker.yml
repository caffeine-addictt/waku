name: Run Tests

on:
  push:
    branches:
      - main
      - master
      - develop
      - v*
  pull_request:
    branches:
      - main
      - master
      - develop
  workflow_dispatch:

defaults:
  run:
    shell: bash

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:
  # The goal of this job is to enable you to
  # selectively run jobs based on the files changed.
  changed-files:
    name: Changed Files
    runs-on: ubuntu-latest
    outputs:
      test-code: ${{ steps.changed-files.outputs.test-code_any_modified == 'true' }}
      #                                          ~~~~~~~~~
      #                     Make sure to change this if you add more conditions
      #                             (should match the yml key used below)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 50 # Assume PRs are less than 50 commits

      - name: Find changed files
        uses: tj-actions/changed-files@v46
        id: changed-files
        with:
          # Docs: https://github.com/tj-actions/changed-files
          files_yaml: |
            common: &common
              - .github/workflows/test-worker.yml
              - Makefile

            test-code:
              - *common
              - src/**
              - '*.json'

  tests:
    name: "Testing"
    runs-on: ubuntu-latest

    # enable running this job conditionally
    needs: changed-files
    if: needs.changed-files.outputs.test-code == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup your language (This is specific to each language)
      # - name: Set up language
      #   uses: actions/setup-python@v5
      #   with:
      #     language-version: latest

      - name: Install dependencies
        run: |
          # python -m pip install -r requirements.txt (for example)

      # Formatting is about enforcing code style
      - name: Formatting
        run: |
          # python -m black --check --diff . (for example)

      # Linting is about enforcing good practices
      - name: Linting
        run: |
          # python -m flake8 . (for example)

      - name: Build
        run: |
          # python setup.py build (for example)

      - name: Testing
        run: |
          # python -m pytest (for example)

      - name: SETUP TESTING
        run: |
          echo "Setup testing CI for your project!"
          echo "Remove this step once you're done :>"
          exit 1

  tests-os-matrix:
    name: "${{ matrix.language_version }} on ${{ matrix.os }}"
    runs-on: "${{ matrix.os }}-latest"

    # enable running this job conditionally
    needs: changed-files
    if: needs.changed-files.outputs.test-code == 'true'

    # This test suite will run for every language version for every OS defined in the matrix
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu
          - windows
          - macos
        # Place your language versions you want to test
        language_version: ["v1.0.0", "v2.0.0"]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup your language (This is specific to each language)
      # - name: Set up language ${{ matrix.language_version }}
      #   uses: actions/setup-python@v5
      #   with:
      #     language-version: ${{ matrix.language_version }}

      - name: Install dependencies
        run: |
          # python -m pip install -r requirements.txt (for example)

      # Formatting is about enforcing code style
      - name: Formatting
        run: |
          # python -m black --check --diff . (for example)

      # Linting is about enforcing good practices
      - name: Linting
        run: |
          # python -m flake8 . (for example)

      - name: Build
        run: |
          # python setup.py build (for example)

      - name: Testing
        run: |
          # python -m pytest (for example)

      - name: SETUP TESTING
        run: |
          echo "Setup testing CI for your project!"
          echo "Remove this step once you're done :>"
          exit 1

  # It is recommended to require this check to pass before merging a pull request
  check:
    if: always()
    name: Tests Successful
    runs-on: ubuntu-latest
    needs: [tests-os-matrix, tests]

    steps:
      - name: Whether the whole test suite passed
        uses: re-actors/alls-green@v1.2.2
        with:
          allowed-skips: ${{ toJSON(needs) }}
          jobs: ${{ toJSON(needs) }}
